version: '3.8'

services:
  web:
    build: ./web
    ports:
      - "5000:5000"
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - FLASK_APP=app.py
      - FLASK_ENV=development
    volumes:
      - ./web:/app
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    stdin_open: true
    tty: true

  db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    restart: unless-stopped

  data-processor:
    build: ./data-processor
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./data-processor:/app
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    command: ["python", "processor.py"]

volumes:
  postgres_data: